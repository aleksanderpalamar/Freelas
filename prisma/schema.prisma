// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String     @id @default(cuid())
  name            String?
  email           String?    @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  userType        String // 'freelancer' or 'client'
  description     String?
  skills          String?
  whatsapp        String?
  accounts        Account[]
  sessions        Session[]
  projects        Project[]
  proposals       Proposal[]
  reviewsGiven    Review[]   @relation("ReviewGiver")
  reviewsReceived Review[]   @relation("ReviewReceiver")
  Freela          Freela[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String     @id @default(cuid())
  title       String
  description String
  budget      Float
  deadline    DateTime
  category    String
  status      String // 'open', 'in_progress', 'completed'
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  clientId    String
  client      User       @relation(fields: [clientId], references: [id])
  proposals   Proposal[]
  reviews     Review[]
}

model Proposal {
  id           String   @id @default(cuid())
  content      String
  price        Float
  deliveryTime Int // in days
  status       String // 'pending', 'accepted', 'rejected'
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  projectId    String
  project      Project  @relation(fields: [projectId], references: [id])
  freelancerId String
  freelancer   User     @relation(fields: [freelancerId], references: [id])
}

model Review {
  id         String   @id @default(cuid())
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  projectId  String
  project    Project  @relation(fields: [projectId], references: [id])
  giverId    String
  giver      User     @relation("ReviewGiver", fields: [giverId], references: [id])
  receiverId String
  receiver   User     @relation("ReviewReceiver", fields: [receiverId], references: [id])
}

model Freela {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String
  duration    String
  status      String   @default("open") // 'open', 'in_progress', 'completed'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  clientId    String
  client      User     @relation(fields: [clientId], references: [id])
}
